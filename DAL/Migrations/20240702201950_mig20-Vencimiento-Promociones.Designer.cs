// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(EstanciasContext))]
    [Migration("20240702201950_mig20-Vencimiento-Promociones")]
    partial class mig20VencimientoPromociones
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Commons.Identity.CommonsFunction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedById");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("Display");

                    b.Property<string>("LastEditById");

                    b.Property<DateTime>("LastEditTime");

                    b.Property<string>("Name");

                    b.Property<string>("RoutesJson");

                    b.Property<bool>("Show");

                    b.HasKey("Id");

                    b.ToTable("AspNetFunctions");
                });

            modelBuilder.Entity("Commons.Identity.CommonsRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<bool>("Show");

                    b.Property<string>("ShowName");

                    b.Property<string>("WorkSpaceId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Commons.Identity.CommonsRoleFunction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("FunctionId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleFunctions");
                });

            modelBuilder.Entity("DAL.Models.Accesos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteId");

                    b.Property<string>("Coordenadas");

                    b.Property<decimal>("Deuda");

                    b.Property<int?>("EstadoDeudaId");

                    b.Property<DateTime>("FechaHora");

                    b.Property<string>("Observaciones");

                    b.Property<int?>("PuestoId");

                    b.Property<bool>("SinCuentaCorriente");

                    b.Property<int?>("TipoAccesoId");

                    b.Property<string>("Turnos");

                    b.Property<int?>("UATPuestoId");

                    b.Property<bool>("ValidadoPorGPS");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstadoDeudaId");

                    b.HasIndex("PuestoId");

                    b.HasIndex("TipoAccesoId");

                    b.HasIndex("UATPuestoId");

                    b.ToTable("Accesos");
                });

            modelBuilder.Entity("DAL.Models.Banners", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BannerFijo");

                    b.Property<int?>("ColorId");

                    b.Property<int?>("EmpresaId");

                    b.Property<DateTime>("Fecha");

                    b.Property<string>("Foto");

                    b.Property<string>("Link");

                    b.Property<int>("Orden");

                    b.Property<bool>("Publico");

                    b.Property<string>("Subtitulo");

                    b.Property<string>("Texto");

                    b.Property<string>("TextoBoton");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("DAL.Models.Campanas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantidadPersonas");

                    b.Property<int>("CantidadProvincias");

                    b.Property<int>("CantidadUnidades");

                    b.Property<int?>("EmpresaId");

                    b.Property<DateTime>("Fecha");

                    b.Property<DateTime?>("FechaBaja");

                    b.Property<byte[]>("Imagen");

                    b.Property<decimal>("MaximoDisponible");

                    b.Property<decimal>("MinimoDisponible");

                    b.Property<string>("Observaciones");

                    b.Property<int>("ProvinciaId");

                    b.Property<string>("TextoMail");

                    b.Property<int>("UnidadId");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Campanas");
                });

            modelBuilder.Entity("DAL.Models.CampanasRenglones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido");

                    b.Property<int?>("CabeceraId");

                    b.Property<string>("Celular");

                    b.Property<long>("DNI");

                    b.Property<decimal>("Disponible");

                    b.Property<decimal>("ImporteMaximo");

                    b.Property<string>("Nombres");

                    b.Property<string>("Provincia");

                    b.Property<int>("ProvinciaId");

                    b.Property<string>("TipoPersona");

                    b.Property<string>("Unidad");

                    b.Property<int>("UnidadId");

                    b.Property<string>("eMail");

                    b.HasKey("Id");

                    b.HasIndex("CabeceraId");

                    b.ToTable("CampanasRenglones");
                });

            modelBuilder.Entity("DAL.Models.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CBU");

                    b.Property<string>("CategoriaLaboral");

                    b.Property<string>("Celular");

                    b.Property<bool>("ClienteValidado");

                    b.Property<int?>("CodeudorId");

                    b.Property<string>("CodigoPostal");

                    b.Property<string>("DestinoLaboral");

                    b.Property<string>("Domicilio");

                    b.Property<int?>("EmpresaId");

                    b.Property<bool>("EsMilitar");

                    b.Property<DateTime?>("FechaBaja");

                    b.Property<DateTime>("FechaIngreso");

                    b.Property<DateTime>("FechaIngresoLaboral");

                    b.Property<byte[]>("FirmaOlografica");

                    b.Property<byte[]>("FirmaOlograficaConfirmacion");

                    b.Property<byte[]>("FotoDNIAnverso");

                    b.Property<byte[]>("FotoDNIReverso");

                    b.Property<byte[]>("FotoSosteniendoDNI");

                    b.Property<byte[]>("LegajoElectronico");

                    b.Property<int?>("LocalidadId");

                    b.Property<string>("NroDocReferido");

                    b.Property<int>("NumeroAsociado");

                    b.Property<string>("NumeroCliente");

                    b.Property<string>("NumeroLegajoLaboral");

                    b.Property<string>("Password");

                    b.Property<int?>("PersonaId");

                    b.Property<bool>("PersonaPoliticamenteExpuesta");

                    b.Property<int?>("ProvinciaId");

                    b.Property<string>("RazonSocial");

                    b.Property<bool>("RecibirPublicidad");

                    b.Property<int?>("ReferenciaAId");

                    b.Property<int?>("ReferenciaBId");

                    b.Property<bool>("RegistroMobile");

                    b.Property<string>("Telefono");

                    b.Property<int?>("TipoClienteId");

                    b.Property<string>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("CodeudorId")
                        .IsUnique()
                        .HasFilter("[CodeudorId] IS NOT NULL");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("LocalidadId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("ProvinciaId");

                    b.HasIndex("ReferenciaAId");

                    b.HasIndex("ReferenciaBId");

                    b.HasIndex("TipoClienteId");

                    b.HasIndex("UsuarioId")
                        .IsUnique()
                        .HasFilter("[UsuarioId] IS NOT NULL");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("DAL.Models.ClientesServicios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ServicioId");

                    b.Property<int?>("TipoClienteId");

                    b.Property<int>("TopeMensual");

                    b.Property<int>("TopeSemanal");

                    b.HasKey("Id");

                    b.HasIndex("ServicioId");

                    b.HasIndex("TipoClienteId");

                    b.ToTable("ClientesServicios");
                });

            modelBuilder.Entity("DAL.Models.Colores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Colores");
                });

            modelBuilder.Entity("DAL.Models.Conceptos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.Property<int>("Signo");

                    b.HasKey("Id");

                    b.ToTable("Conceptos");
                });

            modelBuilder.Entity("DAL.Models.Core.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Banco");
                });

            modelBuilder.Entity("DAL.Models.Core.Billetera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AliasCVU");

                    b.Property<string>("CVU");

                    b.Property<int?>("ClienteId");

                    b.Property<string>("QRCobro");

                    b.Property<decimal>("Saldo");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Billeteras");
                });

            modelBuilder.Entity("DAL.Models.Core.Compras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteId");

                    b.Property<int>("Estado");

                    b.Property<DateTime>("FechaAnulacion");

                    b.Property<DateTime>("FechaCompra");

                    b.Property<int?>("MovimientoId");

                    b.Property<int?>("ProductoId");

                    b.Property<int>("TipoCompra");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MovimientoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ComprasProductos");
                });

            modelBuilder.Entity("DAL.Models.Core.ContactosBilletera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<int?>("BilleteraId");

                    b.Property<int?>("ClienteContactoId");

                    b.Property<string>("Detalle");

                    b.Property<DateTime>("FechaCreacion");

                    b.HasKey("Id");

                    b.HasIndex("BilleteraId");

                    b.HasIndex("ClienteContactoId");

                    b.ToTable("ContactosBilletera");
                });

            modelBuilder.Entity("DAL.Models.Core.CuentaBancaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<int?>("BancoId");

                    b.Property<int?>("BilleteraId");

                    b.Property<string>("CBU");

                    b.Property<string>("Descripcion");

                    b.Property<string>("Numero");

                    b.Property<bool>("Terceros");

                    b.Property<string>("Titular");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("BilleteraId");

                    b.ToTable("CuentaBancaria");
                });

            modelBuilder.Entity("DAL.Models.Core.Financiacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantidadCuotas");

                    b.Property<decimal>("InteresesPorCuota");

                    b.Property<int?>("ProductoId");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("FinanciacionProductos");
                });

            modelBuilder.Entity("DAL.Models.Core.InstitucionFinanciera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("InstitucionFinanciera");
                });

            modelBuilder.Entity("DAL.Models.Core.MovimientoBilletera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BilleteraId");

                    b.Property<string>("CBU");

                    b.Property<int?>("CuentaBancariaId");

                    b.Property<DateTime>("Fecha");

                    b.Property<decimal>("Monto");

                    b.Property<int?>("OrigenAsociadoId");

                    b.Property<string>("QR");

                    b.Property<int?>("TarjetaId");

                    b.Property<int?>("TipoMovimientoId");

                    b.HasKey("Id");

                    b.HasIndex("BilleteraId");

                    b.HasIndex("CuentaBancariaId");

                    b.HasIndex("OrigenAsociadoId");

                    b.HasIndex("TarjetaId");

                    b.HasIndex("TipoMovimientoId");

                    b.ToTable("MovimientosBilletera");
                });

            modelBuilder.Entity("DAL.Models.Core.OrigenMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion");

                    b.Property<int>("IdAsociado");

                    b.Property<int>("TipoOrigen");

                    b.HasKey("Id");

                    b.ToTable("OrigenMovimiento");
                });

            modelBuilder.Entity("DAL.Models.Core.PagoTarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ComprobantePago");

                    b.Property<int>("EstadoPago");

                    b.Property<DateTime?>("FechaComprobante");

                    b.Property<DateTime?>("FechaPagoProximaCuota");

                    b.Property<DateTime?>("FechaVencimiento");

                    b.Property<decimal>("MontoAdeudado");

                    b.Property<string>("NroTarjeta");

                    b.Property<int?>("PersonaId");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("PagoTarjeta");
                });

            modelBuilder.Entity("DAL.Models.Core.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<string>("Descripcion");

                    b.Property<string>("DescripcionAmpliada");

                    b.Property<bool>("Financiable");

                    b.Property<byte[]>("Foto");

                    b.Property<decimal?>("Oferta");

                    b.Property<decimal>("Precio");

                    b.Property<int?>("ProveedorId");

                    b.Property<int?>("RubroId");

                    b.Property<int?>("TipoProductoId");

                    b.HasKey("Id");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("RubroId");

                    b.HasIndex("TipoProductoId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("DAL.Models.Core.ProductoAdjuntos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Extension");

                    b.Property<DateTime>("Fecha");

                    b.Property<byte[]>("Foto");

                    b.Property<string>("Nombre");

                    b.Property<int?>("ProductoId");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductoAdjuntos");
                });

            modelBuilder.Entity("DAL.Models.Core.ProductoCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<int?>("ClienteId");

                    b.Property<string>("Descripcion");

                    b.Property<string>("DescripcionAmpliada");

                    b.Property<byte[]>("Foto");

                    b.Property<decimal?>("Oferta");

                    b.Property<decimal>("Precio");

                    b.Property<int?>("RubroId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("RubroId");

                    b.ToTable("ProductosClientes");
                });

            modelBuilder.Entity("DAL.Models.Core.ProductoClienteContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteCompradorId");

                    b.Property<DateTime>("FechaContacto");

                    b.Property<int?>("ProductoId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteCompradorId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductosClientesContactos");
                });

            modelBuilder.Entity("DAL.Models.Core.ProductoPrecompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteId");

                    b.Property<int>("Estado");

                    b.Property<DateTime>("FechaAnulacion");

                    b.Property<DateTime>("FechaConfirmacion");

                    b.Property<DateTime>("FechaPrecompra");

                    b.Property<int?>("ProductoId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductosPrecompras");
                });

            modelBuilder.Entity("DAL.Models.Core.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<long>("CUIT");

                    b.Property<string>("Domicilio");

                    b.Property<int?>("EmpresaId");

                    b.Property<byte[]>("Foto");

                    b.Property<string>("Nombre");

                    b.Property<string>("RazonSocial");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("DAL.Models.Core.ProveedorRubro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProveedorId");

                    b.Property<int?>("RubroId");

                    b.HasKey("Id");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("RubroId");

                    b.ToTable("ProveedorRubros");
                });

            modelBuilder.Entity("DAL.Models.Core.Rubro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Rubros");
                });

            modelBuilder.Entity("DAL.Models.Core.ServicioBilletera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BilleteraId");

                    b.Property<string>("CodigoServicioFactura");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("BilleteraId");

                    b.ToTable("ServicioBilletera");
                });

            modelBuilder.Entity("DAL.Models.Core.Talles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abreviado");

                    b.Property<string>("Descripcion");

                    b.HasKey("Id");

                    b.ToTable("Talles");
                });

            modelBuilder.Entity("DAL.Models.Core.TallesProductos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductoId");

                    b.Property<int?>("TallesId");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TallesId");

                    b.ToTable("TallesProductos");
                });

            modelBuilder.Entity("DAL.Models.Core.Tarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BancoId");

                    b.Property<int?>("BilleteraId");

                    b.Property<int?>("InstitucionFinancieraId");

                    b.Property<string>("Numero");

                    b.Property<string>("Titular");

                    b.Property<string>("Vencimiento");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("BilleteraId");

                    b.HasIndex("InstitucionFinancieraId");

                    b.ToTable("Tarjeta");
                });

            modelBuilder.Entity("DAL.Models.Core.TipoMovimientoBilletera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Credito");

                    b.Property<bool>("Debito");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TipoMovimientoBilletera");
                });

            modelBuilder.Entity("DAL.Models.Core.TipoMovimientoTarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TipoMovimientoTarjeta");
                });

            modelBuilder.Entity("DAL.Models.Core.TipoProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion");

                    b.HasKey("Id");

                    b.ToTable("TipoProducto");
                });

            modelBuilder.Entity("DAL.Models.CuentaCorriente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteId");

                    b.Property<int?>("ConceptoId");

                    b.Property<DateTime>("Fecha");

                    b.Property<decimal>("Importe");

                    b.Property<string>("Observaciones");

                    b.Property<decimal>("Saldo");

                    b.Property<DateTime?>("Vencimiento");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ConceptoId");

                    b.ToTable("CuentaCorriente");
                });

            modelBuilder.Entity("DAL.Models.DatosEstructura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<string>("CBU");

                    b.Property<string>("CUIT");

                    b.Property<string>("Calle");

                    b.Property<string>("CodigoPostal");

                    b.Property<string>("Convenio");

                    b.Property<string>("CredencialReportes");

                    b.Property<string>("Entidad");

                    b.Property<string>("FAX");

                    b.Property<string>("Localidad");

                    b.Property<string>("NombreDependencia");

                    b.Property<string>("Numero");

                    b.Property<string>("PasswordWS");

                    b.Property<string>("Provincia");

                    b.Property<string>("Sigla");

                    b.Property<string>("Sucursal");

                    b.Property<string>("Telefono");

                    b.Property<string>("URLReportes");

                    b.Property<string>("UsernameWS");

                    b.Property<string>("UsuarioReportes");

                    b.HasKey("Id");

                    b.ToTable("DatosEstructura");
                });

            modelBuilder.Entity("DAL.Models.Empresas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abreviatura");

                    b.Property<long>("CUIT");

                    b.Property<byte[]>("CabeceraMail");

                    b.Property<string>("CasillaMail");

                    b.Property<string>("ColorBotones");

                    b.Property<string>("ColorCarnet");

                    b.Property<string>("ColorFondo");

                    b.Property<string>("ColorFontCarnet");

                    b.Property<string>("ColorLogin");

                    b.Property<string>("Domicilio");

                    b.Property<int>("EntidadIdCGE");

                    b.Property<string>("Facebook");

                    b.Property<DateTime?>("FechaBaja");

                    b.Property<byte[]>("FondoMobile");

                    b.Property<byte[]>("GIFLogoMutual");

                    b.Property<int?>("GrupoId");

                    b.Property<byte[]>("ImagenLogin");

                    b.Property<string>("Instagram");

                    b.Property<byte[]>("LogoMutual");

                    b.Property<string>("Mail");

                    b.Property<bool>("MailBienvenida");

                    b.Property<string>("PasswordCGE");

                    b.Property<string>("PasswordMail");

                    b.Property<int>("PuertoMail");

                    b.Property<string>("RazonSocial");

                    b.Property<bool>("SSLMail");

                    b.Property<string>("Telefono");

                    b.Property<string>("TokenCGE");

                    b.Property<string>("Twitter");

                    b.Property<string>("UrlMail");

                    b.Property<string>("UsernameMail");

                    b.Property<string>("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("DAL.Models.EstadosDeudas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("EstadosDeudas");
                });

            modelBuilder.Entity("DAL.Models.Grupos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("DAL.Models.Horarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<int>("DiaSemana");

                    b.Property<DateTime?>("FechaBaja");

                    b.Property<string>("Nombre");

                    b.Property<int>("Orden");

                    b.Property<int?>("ServicioId");

                    b.HasKey("Id");

                    b.HasIndex("ServicioId");

                    b.ToTable("Horarios");
                });

            modelBuilder.Entity("DAL.Models.ImagenIntro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmpresaId");

                    b.Property<DateTime>("Fecha");

                    b.Property<string>("Foto");

                    b.Property<int>("Orden");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("ImagenIntro");
                });

            modelBuilder.Entity("DAL.Models.Invitaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido");

                    b.Property<DateTime?>("Baja");

                    b.Property<int?>("ClienteId");

                    b.Property<DateTime?>("Completado");

                    b.Property<DateTime>("Desde");

                    b.Property<int>("Estado");

                    b.Property<byte[]>("Foto");

                    b.Property<string>("Hash");

                    b.Property<DateTime>("Hasta");

                    b.Property<string>("Link");

                    b.Property<string>("Nombres");

                    b.Property<long>("NumeroDocumento");

                    b.Property<string>("Observaciones");

                    b.Property<string>("Patente");

                    b.Property<string>("QR");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Invitaciones");
                });

            modelBuilder.Entity("DAL.Models.LeyendaTipoMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<string>("NombreMovimiento");

                    b.Property<string>("TextoLeyenda");

                    b.HasKey("Id");

                    b.ToTable("LeyendaTipoMovimiento");
                });

            modelBuilder.Entity("DAL.Models.Localidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion");

                    b.Property<int>("IdDepartamento");

                    b.Property<int>("IdProvincia");

                    b.Property<string>("Latitud");

                    b.Property<string>("Longitud");

                    b.Property<string>("ProvinciaNombre");

                    b.HasKey("Id");

                    b.ToTable("Localidad");
                });

            modelBuilder.Entity("DAL.Models.MockServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoBarras");

                    b.Property<string>("CodigoServicioFactura");

                    b.Property<decimal>("Monto");

                    b.Property<string>("NombreServicio");

                    b.HasKey("Id");

                    b.ToTable("MockServicios");
                });

            modelBuilder.Entity("DAL.Models.Monedas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Monedas");
                });

            modelBuilder.Entity("DAL.Models.NotificacionesPersonas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteId");

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("FechaHora");

                    b.Property<string>("Titulo");

                    b.Property<DateTime?>("TomaConocimiento");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("NotificacionesPersonas");
                });

            modelBuilder.Entity("DAL.Models.Novedades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColorId");

                    b.Property<int?>("EmpresaId");

                    b.Property<DateTime>("Fecha");

                    b.Property<string>("Foto");

                    b.Property<bool>("Publica");

                    b.Property<string>("Subtitulo");

                    b.Property<string>("Texto");

                    b.Property<string>("TextoBoton");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Novedades");
                });

            modelBuilder.Entity("DAL.Models.Paises", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("DAL.Models.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired();

                    b.Property<int>("CantidadHijos");

                    b.Property<string>("Cuil");

                    b.Property<string>("Email");

                    b.Property<DateTime>("FechaActualizacion");

                    b.Property<DateTime?>("FechaNacimiento");

                    b.Property<string>("FechaVencimiento");

                    b.Property<byte[]>("Foto");

                    b.Property<string>("Nombres")
                        .IsRequired();

                    b.Property<string>("NroDocumento");

                    b.Property<string>("NroTarjeta");

                    b.Property<int?>("PaisId");

                    b.Property<int?>("TipoDocumentoId");

                    b.Property<bool>("TokenEnviado");

                    b.Property<bool>("ValidandoTarjeta");

                    b.HasKey("Id");

                    b.HasIndex("PaisId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("DAL.Models.Promociones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColorId");

                    b.Property<int?>("EmpresaId");

                    b.Property<DateTime>("Fecha");

                    b.Property<DateTime>("FechaHasta");

                    b.Property<string>("Foto");

                    b.Property<string>("Link");

                    b.Property<int>("Orden");

                    b.Property<bool>("PromocionFija");

                    b.Property<bool>("Publica");

                    b.Property<bool>("QR");

                    b.Property<string>("Subtitulo");

                    b.Property<string>("Texto");

                    b.Property<string>("TextoBoton");

                    b.Property<string>("Titulo");

                    b.Property<bool>("Vencimiento");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Promociones");
                });

            modelBuilder.Entity("DAL.Models.PromocionesQR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<int?>("ClienteId");

                    b.Property<DateTime>("Fecha");

                    b.Property<DateTime>("FechaUtilizado");

                    b.Property<string>("Foto");

                    b.Property<string>("Hash");

                    b.Property<int?>("PromocionesId");

                    b.Property<string>("QR");

                    b.Property<string>("Subtitulo");

                    b.Property<string>("Texto");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PromocionesId");

                    b.ToTable("PromocionesQR");
                });

            modelBuilder.Entity("DAL.Models.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion");

                    b.Property<string>("DescripcionCompleta");

                    b.Property<string>("Latitud");

                    b.Property<string>("Longitud");

                    b.HasKey("Id");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("DAL.Models.Puestos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Coordenadas");

                    b.Property<int?>("EmpresaId");

                    b.Property<DateTime?>("FechaBaja");

                    b.Property<string>("Nombre");

                    b.Property<int?>("TipoId");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("TipoId");

                    b.ToTable("Puestos");
                });

            modelBuilder.Entity("DAL.Models.PuestosCodigos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HashQR");

                    b.Property<byte[]>("Imagen");

                    b.Property<int?>("PuestoId");

                    b.Property<DateTime>("ValidoDesde");

                    b.Property<DateTime>("ValidoHasta");

                    b.HasKey("Id");

                    b.HasIndex("PuestoId");

                    b.ToTable("PuestosCodigos");
                });

            modelBuilder.Entity("DAL.Models.Referencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NombreCompleto");

                    b.Property<string>("Telefono");

                    b.Property<string>("Vinculo");

                    b.HasKey("Id");

                    b.ToTable("Referencias");
                });

            modelBuilder.Entity("DAL.Models.Reservas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteAnulaId");

                    b.Property<int?>("ClienteId");

                    b.Property<DateTime>("Fecha");

                    b.Property<DateTime?>("FechaAnulada");

                    b.Property<int?>("HorarioId");

                    b.Property<string>("Observaciones");

                    b.HasKey("Id");

                    b.HasIndex("ClienteAnulaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("HorarioId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("DAL.Models.Servicios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<int>("Cupo");

                    b.Property<int>("DiasProgramacion");

                    b.Property<int?>("EmpresaId");

                    b.Property<DateTime?>("FechaBaja");

                    b.Property<DateTime?>("FechaUnica");

                    b.Property<byte[]>("Icono");

                    b.Property<string>("Nombre");

                    b.Property<string>("Observaciones");

                    b.Property<int?>("TipoId");

                    b.Property<int>("TopeAnualFinde");

                    b.Property<int>("TopeAnualSemana");

                    b.Property<int>("TopeMensualFinde");

                    b.Property<int>("TopeMensualSemana");

                    b.Property<int>("TopePendienteFinde");

                    b.Property<int>("TopePendienteGlobal");

                    b.Property<int>("TopePendienteSemana");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("TipoId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("DAL.Models.Sucursales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address");

                    b.Property<string>("group");

                    b.Property<string>("latitude");

                    b.Property<string>("longitude");

                    b.Property<string>("name");

                    b.Property<string>("phone");

                    b.HasKey("Id");

                    b.ToTable("Sucursales");
                });

            modelBuilder.Entity("DAL.Models.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TipoDocumento");
                });

            modelBuilder.Entity("DAL.Models.TipoPuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TipoPuesto");
                });

            modelBuilder.Entity("DAL.Models.TipoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TipoServicio");
                });

            modelBuilder.Entity("DAL.Models.TiposAccesos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TiposAccesos");
                });

            modelBuilder.Entity("DAL.Models.TiposClientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantidadActividadesSemanales");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TiposClientes");
                });

            modelBuilder.Entity("DAL.Models.UAT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteId");

                    b.Property<DateTime>("FechaHora");

                    b.Property<int?>("PersonaId");

                    b.Property<string>("Token");

                    b.Property<string>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UAT");
                });

            modelBuilder.Entity("DAL.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Administradores");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DeviceId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Mail");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<int?>("PersonasId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("ProveedorId");

                    b.Property<bool>("RecordarPassword");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Token");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserIdNotification");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("VendedoresId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonasId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("VendedoresId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Models.Vendedores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Domicilio");

                    b.Property<string>("Mail");

                    b.Property<int?>("PersonaId");

                    b.Property<string>("Telefono");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("Vendedores");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Commons.Identity.CommonsRoleFunction", b =>
                {
                    b.HasOne("Commons.Identity.CommonsFunction", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId");

                    b.HasOne("Commons.Identity.CommonsRole", "Role")
                        .WithMany("RoleFunctions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("DAL.Models.Accesos", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("DAL.Models.EstadosDeudas", "EstadoDeuda")
                        .WithMany()
                        .HasForeignKey("EstadoDeudaId");

                    b.HasOne("DAL.Models.Puestos", "Puesto")
                        .WithMany()
                        .HasForeignKey("PuestoId");

                    b.HasOne("DAL.Models.TiposAccesos", "TipoAcceso")
                        .WithMany()
                        .HasForeignKey("TipoAccesoId");

                    b.HasOne("DAL.Models.UAT", "UATPuesto")
                        .WithMany()
                        .HasForeignKey("UATPuestoId");
                });

            modelBuilder.Entity("DAL.Models.Banners", b =>
                {
                    b.HasOne("DAL.Models.Colores", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("DAL.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("DAL.Models.Campanas", b =>
                {
                    b.HasOne("DAL.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("DAL.Models.CampanasRenglones", b =>
                {
                    b.HasOne("DAL.Models.Campanas", "Cabecera")
                        .WithMany()
                        .HasForeignKey("CabeceraId");
                });

            modelBuilder.Entity("DAL.Models.Clientes", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "Codeudor")
                        .WithOne("DependeDe")
                        .HasForeignKey("DAL.Models.Clientes", "CodeudorId");

                    b.HasOne("DAL.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.HasOne("DAL.Models.Localidad", "Localidad")
                        .WithMany()
                        .HasForeignKey("LocalidadId");

                    b.HasOne("DAL.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");

                    b.HasOne("DAL.Models.Provincia", "Provincia")
                        .WithMany()
                        .HasForeignKey("ProvinciaId");

                    b.HasOne("DAL.Models.Referencia", "ReferenciaA")
                        .WithMany()
                        .HasForeignKey("ReferenciaAId");

                    b.HasOne("DAL.Models.Referencia", "ReferenciaB")
                        .WithMany()
                        .HasForeignKey("ReferenciaBId");

                    b.HasOne("DAL.Models.TiposClientes", "TipoCliente")
                        .WithMany()
                        .HasForeignKey("TipoClienteId");

                    b.HasOne("DAL.Models.Usuario", "Usuario")
                        .WithOne("Clientes")
                        .HasForeignKey("DAL.Models.Clientes", "UsuarioId");
                });

            modelBuilder.Entity("DAL.Models.ClientesServicios", b =>
                {
                    b.HasOne("DAL.Models.Servicios", "Servicio")
                        .WithMany("TiposSocios")
                        .HasForeignKey("ServicioId");

                    b.HasOne("DAL.Models.TiposClientes", "TipoCliente")
                        .WithMany()
                        .HasForeignKey("TipoClienteId");
                });

            modelBuilder.Entity("DAL.Models.Core.Billetera", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("DAL.Models.Core.Compras", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("DAL.Models.Core.MovimientoBilletera", "Movimiento")
                        .WithMany()
                        .HasForeignKey("MovimientoId");

                    b.HasOne("DAL.Models.Core.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId");
                });

            modelBuilder.Entity("DAL.Models.Core.ContactosBilletera", b =>
                {
                    b.HasOne("DAL.Models.Core.Billetera")
                        .WithMany("Contactos")
                        .HasForeignKey("BilleteraId");

                    b.HasOne("DAL.Models.Clientes", "ClienteContacto")
                        .WithMany()
                        .HasForeignKey("ClienteContactoId");
                });

            modelBuilder.Entity("DAL.Models.Core.CuentaBancaria", b =>
                {
                    b.HasOne("DAL.Models.Core.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId");

                    b.HasOne("DAL.Models.Core.Billetera")
                        .WithMany("Cuentas")
                        .HasForeignKey("BilleteraId");
                });

            modelBuilder.Entity("DAL.Models.Core.Financiacion", b =>
                {
                    b.HasOne("DAL.Models.Core.Producto", "Producto")
                        .WithMany("FinanciacionProducto")
                        .HasForeignKey("ProductoId");
                });

            modelBuilder.Entity("DAL.Models.Core.MovimientoBilletera", b =>
                {
                    b.HasOne("DAL.Models.Core.Billetera")
                        .WithMany("Movimientos")
                        .HasForeignKey("BilleteraId");

                    b.HasOne("DAL.Models.Core.CuentaBancaria")
                        .WithMany("Movimientos")
                        .HasForeignKey("CuentaBancariaId");

                    b.HasOne("DAL.Models.Core.OrigenMovimiento", "OrigenAsociado")
                        .WithMany()
                        .HasForeignKey("OrigenAsociadoId");

                    b.HasOne("DAL.Models.Core.Tarjeta")
                        .WithMany("Movimientos")
                        .HasForeignKey("TarjetaId");

                    b.HasOne("DAL.Models.Core.TipoMovimientoBilletera", "TipoMovimiento")
                        .WithMany()
                        .HasForeignKey("TipoMovimientoId");
                });

            modelBuilder.Entity("DAL.Models.Core.PagoTarjeta", b =>
                {
                    b.HasOne("DAL.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");
                });

            modelBuilder.Entity("DAL.Models.Core.Producto", b =>
                {
                    b.HasOne("DAL.Models.Core.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorId");

                    b.HasOne("DAL.Models.Core.Rubro", "Rubro")
                        .WithMany()
                        .HasForeignKey("RubroId");

                    b.HasOne("DAL.Models.Core.TipoProducto", "TipoProducto")
                        .WithMany()
                        .HasForeignKey("TipoProductoId");
                });

            modelBuilder.Entity("DAL.Models.Core.ProductoAdjuntos", b =>
                {
                    b.HasOne("DAL.Models.Core.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId");
                });

            modelBuilder.Entity("DAL.Models.Core.ProductoCliente", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("DAL.Models.Core.Rubro", "Rubro")
                        .WithMany()
                        .HasForeignKey("RubroId");
                });

            modelBuilder.Entity("DAL.Models.Core.ProductoClienteContacto", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "ClienteComprador")
                        .WithMany()
                        .HasForeignKey("ClienteCompradorId");

                    b.HasOne("DAL.Models.Core.ProductoCliente", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId");
                });

            modelBuilder.Entity("DAL.Models.Core.ProductoPrecompra", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("DAL.Models.Core.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId");
                });

            modelBuilder.Entity("DAL.Models.Core.Proveedor", b =>
                {
                    b.HasOne("DAL.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("DAL.Models.Core.ProveedorRubro", b =>
                {
                    b.HasOne("DAL.Models.Core.Proveedor", "Proveedor")
                        .WithMany("Rubros")
                        .HasForeignKey("ProveedorId");

                    b.HasOne("DAL.Models.Core.Rubro", "Rubro")
                        .WithMany("Proveedores")
                        .HasForeignKey("RubroId");
                });

            modelBuilder.Entity("DAL.Models.Core.ServicioBilletera", b =>
                {
                    b.HasOne("DAL.Models.Core.Billetera")
                        .WithMany("Servicios")
                        .HasForeignKey("BilleteraId");
                });

            modelBuilder.Entity("DAL.Models.Core.TallesProductos", b =>
                {
                    b.HasOne("DAL.Models.Core.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId");

                    b.HasOne("DAL.Models.Core.Talles", "Talles")
                        .WithMany()
                        .HasForeignKey("TallesId");
                });

            modelBuilder.Entity("DAL.Models.Core.Tarjeta", b =>
                {
                    b.HasOne("DAL.Models.Core.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId");

                    b.HasOne("DAL.Models.Core.Billetera")
                        .WithMany("Tarjetas")
                        .HasForeignKey("BilleteraId");

                    b.HasOne("DAL.Models.Core.InstitucionFinanciera", "InstitucionFinanciera")
                        .WithMany()
                        .HasForeignKey("InstitucionFinancieraId");
                });

            modelBuilder.Entity("DAL.Models.CuentaCorriente", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("DAL.Models.Conceptos", "Concepto")
                        .WithMany()
                        .HasForeignKey("ConceptoId");
                });

            modelBuilder.Entity("DAL.Models.Empresas", b =>
                {
                    b.HasOne("DAL.Models.Grupos", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId");
                });

            modelBuilder.Entity("DAL.Models.Horarios", b =>
                {
                    b.HasOne("DAL.Models.Servicios", "Servicio")
                        .WithMany("Horario")
                        .HasForeignKey("ServicioId");
                });

            modelBuilder.Entity("DAL.Models.ImagenIntro", b =>
                {
                    b.HasOne("DAL.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("DAL.Models.Invitaciones", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("DAL.Models.NotificacionesPersonas", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("DAL.Models.Novedades", b =>
                {
                    b.HasOne("DAL.Models.Colores", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("DAL.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("DAL.Models.Persona", b =>
                {
                    b.HasOne("DAL.Models.Paises", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId");

                    b.HasOne("DAL.Models.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId");
                });

            modelBuilder.Entity("DAL.Models.Promociones", b =>
                {
                    b.HasOne("DAL.Models.Colores", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("DAL.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("DAL.Models.PromocionesQR", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("DAL.Models.Promociones", "Promociones")
                        .WithMany()
                        .HasForeignKey("PromocionesId");
                });

            modelBuilder.Entity("DAL.Models.Puestos", b =>
                {
                    b.HasOne("DAL.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.HasOne("DAL.Models.TipoPuesto", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId");
                });

            modelBuilder.Entity("DAL.Models.PuestosCodigos", b =>
                {
                    b.HasOne("DAL.Models.Puestos", "Puesto")
                        .WithMany("PuestoCodigos")
                        .HasForeignKey("PuestoId");
                });

            modelBuilder.Entity("DAL.Models.Reservas", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "ClienteAnula")
                        .WithMany()
                        .HasForeignKey("ClienteAnulaId");

                    b.HasOne("DAL.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("DAL.Models.Horarios", "Horario")
                        .WithMany()
                        .HasForeignKey("HorarioId");
                });

            modelBuilder.Entity("DAL.Models.Servicios", b =>
                {
                    b.HasOne("DAL.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.HasOne("DAL.Models.TipoServicio", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId");
                });

            modelBuilder.Entity("DAL.Models.UAT", b =>
                {
                    b.HasOne("DAL.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("DAL.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");

                    b.HasOne("DAL.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("DAL.Models.Usuario", b =>
                {
                    b.HasOne("DAL.Models.Persona", "Personas")
                        .WithMany()
                        .HasForeignKey("PersonasId");

                    b.HasOne("DAL.Models.Core.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorId");

                    b.HasOne("DAL.Models.Vendedores", "Vendedores")
                        .WithMany()
                        .HasForeignKey("VendedoresId");
                });

            modelBuilder.Entity("DAL.Models.Vendedores", b =>
                {
                    b.HasOne("DAL.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Commons.Identity.CommonsRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Commons.Identity.CommonsRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
