@using DAL.Models.Core;
@model Commons.Models.Page<DAL.Models.Core.PagoTarjeta>

<div class="box box-info">
    <div class="box-header with-border filtro-grilla">
        <span class="txt-titulo-box">Listado de Comprobantes</span>
        <div class="input-group input-group-sm pull-right" style="max-width: 300px;">@*
            <a onclick="nuevoPais()" class="btn btn-info btn-sm">
                <i class="fa fa-plus"><span class="hidden-xs"> Nuevo</span></i>
            </a>*@
        </div>
    </div>
    <div class="box-body">
        <table id="listadoPagos" class="table table-hover table-bordered table-responsive borde_interno">
            <thead>
                <tr>
                    <th hidden>
                        Id
                    </th>
                    <th>
                        Cliente
                    </th>
                    <th>
                        Nro Documento
                    </th>
                    <th>
                        Fecha Vencimiento
                    </th>
                    <th>
                        Fecha Comprobante
                    </th>
                    <th>
                        Monto Próxima Cuota
                    </th>
                    <th>
                        EstadoPago
                    </th>
                    <th>
                        Acciones
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td hidden>
                            @item.Id
                        </td>
                        <td>
                            @item.Persona.Apellido @item.Persona.Nombres
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Persona.NroDocumento)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FechaVencimiento)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FechaComprobante)
                        </td>
                        <td>
                            @item.MontoAdeudado.ToString().Replace(".", ",")
                        </td>
                        <td>
                            @if (item.EstadoPago==EstadoPago.Pendiente)
                            {
                                <small class="label bg-yellow">Pendiente</small>
                            }
                            else if (item.EstadoPago==EstadoPago.Pagado)
                            {
                                <small class="label bg-blue">Pagado</small>
                            }
                            else if (item.EstadoPago==EstadoPago.Aprobado)
                            {
                                <small class="label bg-green">Aprobado</small>
                            }
                            else if (item.EstadoPago==EstadoPago.Rechazado)
                            {
                                <small class="label bg-red">Rechazado</small>
                            }
                        </td>
                        <td>
                            @if (item.ComprobantePago!=null)
                            {
                                <a onclick="VerComprobante('@item.Id')" title="Ver Comprobante" class="btn btn-warning btn-xs"><i class="fa fa-file-photo-o"></i></a>

                                @if (item.EstadoPago==EstadoPago.Pagado)
                                {
                                    <a onclick="AprobarComprobante('@item.Id')" title="Aprobar Pago" class="btn btn-primary btn-xs"><i class="fa fa-check"></i></a>
                                    <a onclick="RechazarComprobante('@item.Id')" title="Rechazar Pago" class="btn btn-danger btn-xs"><i class="fa fa-remove "></i></a>
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<modal title="Ver Comprobante" callback-modal="true" function="VerComprobante" load-url="/Core/PagoTarjetaHistorico/_VerComprobante/" size="Large"></modal>

<script>
    $(document).ready(function () {
        $('#listadoPagos').DataTable({
            "columnDefs": [
                { "searchable": false, "orderable": false, "targets": 0, visible: false, },
                { "searchable": true, "orderable": false, "targets": 1 },
                { "width": "10%", class: "text-center", "searchable": true, "orderable": false, "targets": 2 },
                { "width": "10%", class: "text-center", "searchable": false, "orderable": false, "targets": 3 },
                { "width": "10%", class: "text-center", "searchable": false, "orderable": false, "targets": 4 },
                { "width": "10%", class: "text-center", "searchable": false, "orderable": false, "targets": 5 },
                { "width": "10%", class: "text-center", "searchable": false, "orderable": false, "targets": 6 },
                { "width": "10%", class: "text-center", "searchable": false, "orderable": false, "targets": 7 }
            ],
            "stateSave": false,
            "cache": false,
            "order": [0, 'desc'],
            "language": {
                'url': '@Url.Content("~/lib/arg.json")'
            }
        });
    });


    const AprobarComprobante = (id) => {
        Swal.fire({
            title: "¿Aprobar Pago?",
            text: "Una vez aprobado no se prodra regresar al estado anterior!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Aceptar"
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/Core/PagoTarjetaHistorico/AprobarComprobante/' + id)
                    .then(response => response.json())
                    .then(data => {
                        console.log(data); // Aquí puedes manipular los datos obtenidos
                        //if (result.isConfirmed) {
                        if (result.isConfirmed && data==true) {
                            Swal.fire({
                                title: "Aprobado!",
                                text: "El Pago se Aprobó.",
                                icon: "success"
                            });
                        }else{
                            Swal.fire({
                                title: "Error!",
                                text: "Error al aprobar el Pago.",
                                icon: "danger"
                            });
                        }
                        location.reload();
                    })
                    .catch(error => {
                        Swal.fire({
                            title: "Error!",
                            text: "Error al obtener los datos:" + error,
                            icon: "danger"
                        });
                    });
                }
        });        
    };


    const RechazarComprobante = (id) => {
        Swal.fire({
            title: "¿Rechazar Pago?",
            text: "Una vez rechazado no se prodra regresar al estado anterior!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Aceptar"
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/Core/PagoTarjetaHistorico/RechazarComprobante/' + id)
                    .then(response => response.json())
                    .then(data => {
                        console.log(data); // Aquí puedes manipular los datos obtenidos
                        //if (result.isConfirmed) {
                        if (result.isConfirmed && data == true) {
                            Swal.fire({
                                title: "Rechazado!",
                                text: "El Pago se Rechazó.",
                                icon: "success"
                            });
                        } else {
                            Swal.fire({
                                title: "Error!",
                                text: "Error al rechazar el Pago.",
                                icon: "danger"
                            });
                        }
                        location.reload();
                    })
                    .catch(error => {
                        Swal.fire({
                            title: "Error!",
                            text: "Error al obtener los datos:" + error,
                            icon: "danger"
                        });
                    });
                }
        });
    };





</script>
